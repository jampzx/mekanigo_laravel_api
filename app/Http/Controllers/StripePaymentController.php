<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Stripe\Stripe;
use Stripe\Charge;

class StripePaymentController extends Controller
{
    public function charge(Request $request)
    {
        $amount = $request->input('amount');
        $token = $request->input('token');

        // Set your Stripe API key
        Stripe::setApiKey(config('services.stripe.secret'));

        try {
            // Create a charge
            $charge = Charge::create([
                'amount' => $amount,
                'currency' => 'php',
                'source' => $token, // The token generated by the client-side Stripe.js
            ]);

        // Payment successful
            return response()->json(['message' => 'Payment successful!', 'charge' => $charge]);
        } catch (\Stripe\Exception\CardException $e) {
            // Card was declined
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        } catch (\Stripe\Exception\RateLimitException $e) {
            // Too many requests made to the API too quickly
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        } catch (\Stripe\Exception\InvalidRequestException $e) {
            // Invalid parameters were supplied to Stripe's API
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        } catch (\Stripe\Exception\AuthenticationException $e) {
            // Authentication with Stripe's API failed
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        } catch (\Stripe\Exception\ApiConnectionException $e) {
            // Network communication with Stripe failed
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        } catch (\Stripe\Exception\ApiErrorException $e) {
            // Generic API error
            return response()->json(['message' => 'Payment failed: ' . $e->getMessage()]);
        }
    }
}